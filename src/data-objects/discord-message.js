"use strict";
exports.__esModule = true;
exports.DiscordMessage = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
var DiscordAPI = require("../api/discord-api");
var discord_guild_memeber_1 = require("./discord-guild-memeber");
var discord_user_1 = require("./discord-user");
var DiscordMessage = /** @class */ (function () {
    //     public nonce ? integer or string	used for validating a message was sent
    //     public pinned	boolean	whether this message is pinned
    //     public webhook_id ? snowflake	if the message is generated by a webhook, this is the webhook's id
    //     public type integer	type of message
    //     public activity ? message activity object	sent with Rich Presence - related chat embeds
    //     public application ? partial application object	sent with Rich Presence - related chat embeds
    //     public application_id ? snowflake	if the message is a response to an Interaction, this is the id of the interaction's application
    //     public message_reference ? message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
    //     public flags ? integer	message flags combined as a bitfield
    //     public referenced_message ?*****	? message object	the message associated with the message_reference
    //     public interaction ? message interaction object	sent if the message is a response to an Interaction
    //     public thread ? channel object	the thread that was started from this message, includes thread member object
    //     public components ? Array of message components	sent if the message contains components like buttons, action rows, or other interactive components
    //     public sticker_items ? array of message sticker item objects	sent if the message contains stickers
    //     public stickers ? array of sticker objects	Deprecated the stickers sent with the message
    function DiscordMessage(id, channel_id, author, content, timestamp) {
        this.id = id;
        this.channel_id = channel_id;
        this.author = author;
        this.content = content;
        this.timestamp = timestamp;
    }
    DiscordMessage.fromJson = function (json) {
        var _a;
        var newInst = new DiscordMessage(json.id, json.channel_id, discord_user_1.DiscordUser.fromJson(json.author), json.content, json.timestamp);
        newInst.guild_id = json.guild_id;
        newInst.member = discord_guild_memeber_1.DiscordGuildMember.fromJson((_a = json.member) !== null && _a !== void 0 ? _a : {}, newInst.author);
        newInst.edited_timestamp = json.edited_timestamp;
        newInst.tts = json.tts;
        newInst.mention_everyone = json.mention_everyone;
        newInst.mentions = json.mentions.map(discord_user_1.DiscordUser.fromJson);
        return newInst;
    };
    DiscordMessage.prototype.reply = function (message) {
        return DiscordAPI.createMessage(this.channel_id, {
            content: message,
            message_reference: {
                message_id: this.id,
                channel_id: this.channel_id,
                guild_id: this.guild_id
            }
        });
    };
    DiscordMessage.prototype.sendMessageInChannel = function (message) {
        return DiscordAPI.createMessage(this.channel_id, { content: message });
    };
    DiscordMessage.prototype.sendInChannel = function (message) {
        return DiscordAPI.createMessage(this.channel_id, message);
    };
    DiscordMessage.prototype.edit = function (message) {
        return DiscordAPI.editMessage(this.channel_id, this.id, message);
    };
    DiscordMessage.prototype.react = function (emoji) {
        return DiscordAPI.addReaction(this.channel_id, this.id, emoji);
    };
    DiscordMessage.prototype.removeAllReactions = function () {
        return DiscordAPI.deleteAllReactions(this.channel_id, this.id);
    };
    return DiscordMessage;
}());
exports.DiscordMessage = DiscordMessage;
